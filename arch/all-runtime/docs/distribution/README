=================================Introduction==================================

AxRuntime (AxRT) is a product for application developers who enjoy creating
their applications using Amiga APIs.

The runtime allows developers to continue developing Amiga applications in
unmodified way while at the same time being able to utilize modern development
tools available on Linux like IDEs, debuggers, profilers, etc.

This solution lets developers compile their Amiga API-based applications as
Linux binaries. Once the features are implemented, tested and optimized using
the runtime on Linux, developers re-compile their applications for their
Amiga-like system of choice and perform final quality checking.

Applications created with AxRuntime can be distributed to the Linux
community giving developers a much broader user base and a possibility to
invite developers from outside general Amiga community to contribute to the
application.

https://www.axrt.org/
https://github.com/deadw00d/AROS/tree/alt-runtime

================================Acknowledgement================================

AxRuntime is based on work of AROS projects, which is an open source
re-implementation of AmigaOS 3.1 API. More information on AROS is available
at: http://www.aros.org/

================================Current Version================================

1) What is available is current version?

    Current version is version V40.

    This is an early preview version allowing application developers to test
    compilation and execution of their applications against the runtime. This
    version is mainly aimed at gathering feedback on directions in which
    runtime should evolve, however simple applications will already be fully
    supported and usable.

    Notes:
    - In case of issues, please make sure you have only one monitor connected
      to your Linux when running this preview.
    - This version was developed and tested under Ubuntu 18.04 64-bit.
      Compatibility with other Linux distributions may vary. Ubuntu-based
      distribution like Linux Mint are supported.

2) How do I install and use the runtime?

    Runtime is composed of three modules: libaxrt.so and AXRTSYS and USERSYS
    directories. Application loads libaxrt.so, which then in turn initializes
    the runtime and user settings.

    Runtime is distributed as .deb package which can be downloaded from
    https://www.axrt.org/download. Package name is libaxrt-2.0. The package
    installs into /usr/lib/x86_64-linux-gnu/axrt/2.0

3) How do I install and use the SDK?

    Runtime SDK is distributed as .deb package which can be downloaded from
    https://www.axrt.org/download. Package name is libaxrt-2.0-dev. The package
    installs into /usr/lib/x86_64-linux-gnu/ and /usr/include/axrt

4) How do I build an application using runtime?

4.1) Easy start

    The 'example' directory which contains a Makefile configured to build with
    the SDK. Add your source files to SRC variable and issue make command in
    Linux console.

4.2) Detailed - Compilation

    Add __AROS__ define and path to header files, example:

    CFLAGS = -D__AROS__ -I/usr/include/axrt

4.3) Detailed - Linking

    i.) Add startup.o and axrt.ld to objects being linked, example:

    OBJ += /usr/lib/x86_64-linux-gnu/startup.o /usr/lib/x86_64-linux-gnu/axrt.ld

    ii.) Select axrt.specs linker specs file, example:

    LDFLAGS = -specs=/usr/lib/x86_64-linux-gnu/axrt.specs

    iii.) Add additional linker libraries to resolve symbols, example:

    -lmui -lamiga -lstdc.static -lstdc -lcodesets -lkeymap -lexpansion -lcommodities
    -ldiskfont -lasl -lmuimaster -ldatatypes -lcybergraphics -lworkbench -licon
    -lintuition -lgadtools -llayers -liffparse -lgraphics -llocale -ldos
    -lutility -lexec -lm

4.4) Detailed - Running

    Execute the binary resulting from the build.

5) How do I compile a module (library, class) for the runtime?

    This is not yet possible in this version.

6) How do I distribute my application as self-contained boundle?

    AxRuntime supports also boundling so that users of application don't have
    to install the runtime system-wide from a package.

    In order to build such boundle:
    - Copy /usr/lib/x86_64-linux-gnu/libaxrt.so to applications directory
    - Copy contents of /usr/lib/x86_64-linux-gnu/axrt/2.0 directory to
      AXRTSYS subdirectory in application directory

    <Application Directory>
    ├── <Application Executable>
    ├── AXRTSYS
    ├── libaxrt.so

    If you are getting the following error when running the application:

    'error while loading shared libraries: libaxrt.so: cannot open shared
     object file: No such file or directory'

    then most likely setting 'rpath' to $ORIGIN failed during linking. You can
    check this by invoking:

    $readelf <executable> -d | grep path
    0x000000000000000f (RPATH)              Library rpath: [$ORIGIN]

    If the string does not read $ORIGIN, then inspect and fix the axrt.specs
    file.

======================================FAQ======================================

1) Do I need to use special compiler and linker?

    No. Any compiler available on your Linux setup is usable out of
    the box.

2) How to get in contact with development team?

    At this point in time send an email to: deadwood@onet.pl

3) Will AxRuntime work under Windows, BSD, MacOS in future?

    Yes, support for other platforms is planned.

4) What does it mean that AxRuntime supports SMP (Symmetric Multiprocessing)?

    Unlike current Amiga-like platforms, Tasks and Processes in AxRuntime
    are distributed across different CPU cores. This means they execute in real
    parallel conditions.

    AxRuntime enables SMP in "forward-compatible" way. This means any
    application that has multiple tasks and is working correctly under the
    runtime, is guaranteed to be working correctly under the native platform.

    The original source code though might sometimes need modifications to work
    correctly under platform. This includes:

    1) SysBase->ThisTask is removed.

        SOLUTION: Use FindTask(NULL).

    2) It is not guaranteed that newly created Task with higher priority than
    current Task will be executed before current Task continues.

        SOLUTION: Use semaphores to serialize access and execution.

5) Will AxRuntime work under PPC Linux?

    This version is being considered and it will be made if there is strong
    need expressed by developer community.

6) Will AxRuntime packages be available via ppa repository?

    Yes, it is planned to provide such repository at some point.

